package main

import (
	"context"
	"crypto/tls"
	"flag"
	"fmt"
	smtls "github.com/tiqio/qtls-go19"
	"io"
	"log"
	"os"

	"github.com/quic-go/quic-go"
)

const addr = "localhost:4242"

const message = "foobar"

// We start a server echoing data on the first stream the client opens,
// then connect with a client, send the message, and wait for its receipt.
func main() {
	go func() { log.Fatal(echoServer()) }()

	err := clientMain()
	if err != nil {
		panic(err)
	}
}

// Start a server that echos all data on the first stream opened by the client
func echoServer() error {
	listener, err := quic.ListenAddr(addr, generateTLSConfig(), nil)
	if err != nil {
		return err
	}
	conn, err := listener.Accept(context.Background())
	if err != nil {
		return err
	}
	stream, err := conn.AcceptStream(context.Background())
	if err != nil {
		panic(err)
	}
	// Echo through the loggingWriter
	_, err = io.Copy(loggingWriter{stream}, stream)
	return err
}

func clientMain() error {
	tlsConf := &tls.Config{
		InsecureSkipVerify: true,
		NextProtos:         []string{"quic-echo-example"},
		CipherSuites:       []uint16{smtls.TLS_SM4_GCM_SM3},
		MinVersion:         smtls.VersionTLS12,
		CurvePreferences:   []smtls.CurveID{smtls.CurveSM2},
	}
	conn, err := quic.DialAddr(addr, tlsConf, nil)
	if err != nil {
		return err
	}

	stream, err := conn.OpenStreamSync(context.Background())
	if err != nil {
		return err
	}

	fmt.Printf("Client: Sending '%s'\n", message)
	_, err = stream.Write([]byte(message))
	if err != nil {
		return err
	}

	buf := make([]byte, len(message))
	_, err = io.ReadFull(stream, buf)
	if err != nil {
		return err
	}
	fmt.Printf("Client: Got '%s'\n", buf)

	return nil
}

// A wrapper for io.Writer that also logs the message.
type loggingWriter struct{ io.Writer }

func (w loggingWriter) Write(b []byte) (int, error) {
	fmt.Printf("Server: Got '%s'\n", string(b))
	return w.Writer.Write(b)
}

// Setup a bare-bones TLS config for the server
func generateTLSConfig() *tls.Config {
	certFile := "example/testdata/gm-example-cert.pem"
	keyFile := "example/testdata/gm-example-key.pem"
	keyLogFilePath := "tls.log"
	flag.Parse()
	cert, err := smtls.LoadX509KeyPair(certFile, keyFile)
	if err != nil {
		log.Fatal(err)
	}

	keyLogFile, _ := os.OpenFile(keyLogFilePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
	fmt.Fprintf(keyLogFile, "# SSL/TLS secrets log file, generated by go\n")

	return &smtls.Config{
		Certificates:     []tls.Certificate{cert},
		CipherSuites:     []uint16{smtls.TLS_SM4_GCM_SM3},
		MinVersion:       smtls.VersionTLS13,
		CurvePreferences: []smtls.CurveID{smtls.CurveSM2},
		KeyLogWriter:     keyLogFile,
	}
}
